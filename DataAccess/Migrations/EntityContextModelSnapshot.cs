// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EntityContext))]
    partial class EntityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Schemas.Auth.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sessions", "auth");
                });

            modelBuilder.Entity("DataAccess.Schemas.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("users", "auth");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrentCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("current_company");

                    b.Property<string>("CurrentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("current_title");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<decimal?>("ExpectedSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("expected_salary");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("github_url");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_contact_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("resume_url");

                    b.Property<int>("SalaryCurrency")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("salary_currency");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_candidates_email_unique");

                    b.ToTable("candidates");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("degree");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field_of_study");

                    b.Property<string>("Grade")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("grade");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("institution");

                    b.Property<bool>("IsCurrentEducation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current_education");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("idx_candidate_education_candidate_id");

                    b.ToTable("candidate_education");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCurrentJob")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current_job");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("job_title");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .HasDatabaseName("idx_candidate_experiences_candidate_id");

                    b.ToTable("candidate_experiences");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_certified");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency_level");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<short?>("YearsOfExperience")
                        .HasColumnType("smallint")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("CandidateId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("idx_candidate_skills_candidate_skill_unique");

                    b.ToTable("candidate_skills", t =>
                        {
                            t.HasCheckConstraint("ck_candidate_skills_proficiency_level", "proficiency_level >= 1 AND proficiency_level <= 10");
                        });
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_date");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("LastInteractionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_interaction_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_candidate_vacancies_status");

                    b.HasIndex("VacancyId");

                    b.HasIndex("CandidateId", "VacancyId")
                        .IsUnique()
                        .HasDatabaseName("idx_candidate_vacancies_candidate_vacancy_unique");

                    b.ToTable("candidate_vacancies", t =>
                        {
                            t.HasCheckConstraint("ck_candidate_vacancies_score", "score >= 1 AND score <= 100");
                        });
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("industry");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("size");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_companies_name");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CandidateVacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("candidate_vacancy_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<short>("DurationMinutes")
                        .HasColumnType("smallint")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("InterviewerEmail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("interviewer_email");

                    b.Property<Guid?>("InterviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("interviewer_id");

                    b.Property<string>("InterviewerName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("interviewer_name");

                    b.Property<string>("MeetingLink")
                        .HasColumnType("text")
                        .HasColumnName("meeting_link");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<byte>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CandidateVacancyId")
                        .HasDatabaseName("idx_interviews_candidate_vacancy_id");

                    b.HasIndex("InterviewerId");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("idx_interviews_scheduled_date");

                    b.ToTable("interviews", t =>
                        {
                            t.HasCheckConstraint("ck_interviews_rating", "rating >= 1 AND rating <= 10");
                        });
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.ItemFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_name");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("item_files");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.JobVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("integer")
                        .HasColumnName("employment_type");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("experience_level");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<int>("SalaryCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("salary_currency");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("salary_max");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("salary_min");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<short?>("TargetHires")
                        .HasColumnType("smallint")
                        .HasColumnName("target_hires");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("idx_job_vacancies_company_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_job_vacancies_status");

                    b.ToTable("job_vacancies");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("budget");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.ProjectVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("ProjectId", "VacancyId")
                        .IsUnique()
                        .HasDatabaseName("idx_project_vacancies_project_vacancy_unique");

                    b.ToTable("project_vacancies", t =>
                        {
                            t.HasCheckConstraint("ck_project_vacancies_priority", "priority >= 1 AND priority <= 5");
                        });
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_skills_name_unique");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.VacancySkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("MinProficiencyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("min_proficiency_level");

                    b.Property<int?>("MinYearsOfExperience")
                        .HasColumnType("integer")
                        .HasColumnName("min_years_of_experience");

                    b.Property<int>("RequirementLevel")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("requirement_level");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<byte>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid")
                        .HasColumnName("vacancy_id");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("VacancyId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("idx_vacancy_skills_vacancy_skill_unique");

                    b.ToTable("vacancy_skills", t =>
                        {
                            t.HasCheckConstraint("ck_vacancy_skills_min_proficiency_level", "min_proficiency_level >= 1 AND min_proficiency_level <= 10");
                        });
                });

            modelBuilder.Entity("DataAccess.Schemas.Auth.Session", b =>
                {
                    b.HasOne("DataAccess.Schemas.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateEducation", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Candidate", "Candidate")
                        .WithMany("Education")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_education_candidate_id");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateExperience", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Candidate", "Candidate")
                        .WithMany("Experiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_experiences_candidate_id");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateSkill", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_skills_candidate_id");

                    b.HasOne("DataAccess.Schemas.Public.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_skills_skill_id");

                    b.Navigation("Candidate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateVacancy", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Candidate", "Candidate")
                        .WithMany("CandidateVacancies")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_vacancies_candidate_id");

                    b.HasOne("DataAccess.Schemas.Public.JobVacancy", "Vacancy")
                        .WithMany("CandidateVacancies")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_candidate_vacancies_vacancy_id");

                    b.Navigation("Candidate");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Interview", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.CandidateVacancy", "CandidateVacancy")
                        .WithMany("Interviews")
                        .HasForeignKey("CandidateVacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interviews_candidate_vacancy_id");

                    b.HasOne("DataAccess.Schemas.Auth.User", "Interviewer")
                        .WithMany()
                        .HasForeignKey("InterviewerId");

                    b.Navigation("CandidateVacancy");

                    b.Navigation("Interviewer");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.JobVacancy", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Company", "Company")
                        .WithMany("JobVacancies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_vacancies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Project", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.ProjectVacancy", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Project", "Project")
                        .WithMany("ProjectVacancies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_vacancies_project_id");

                    b.HasOne("DataAccess.Schemas.Public.JobVacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_vacancies_vacancy_id");

                    b.Navigation("Project");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.VacancySkill", b =>
                {
                    b.HasOne("DataAccess.Schemas.Public.Skill", "Skill")
                        .WithMany("VacancySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_skills_skill_id");

                    b.HasOne("DataAccess.Schemas.Public.JobVacancy", "Vacancy")
                        .WithMany("VacancySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vacancy_skills_vacancy_id");

                    b.Navigation("Skill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Candidate", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("CandidateVacancies");

                    b.Navigation("Education");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.CandidateVacancy", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Company", b =>
                {
                    b.Navigation("JobVacancies");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.JobVacancy", b =>
                {
                    b.Navigation("CandidateVacancies");

                    b.Navigation("VacancySkills");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Project", b =>
                {
                    b.Navigation("ProjectVacancies");
                });

            modelBuilder.Entity("DataAccess.Schemas.Public.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("VacancySkills");
                });
#pragma warning restore 612, 618
        }
    }
}
